/// <reference types="node" />
import { Prompt, type PromptOptions } from "./prompts-prompt-base";
import { type ActionKey } from "./utils";
export interface TextPromptOptions extends PromptOptions {
    label: string;
    message: string;
    initial?: string;
    style?: string;
    validate?: (v: any) => v is string;
    error?: string;
    hint?: string;
}
export declare class TextPrompt extends Prompt {
    transform: {
        render: (v: string) => any;
        scale: number;
    };
    label: string;
    scale: number;
    msg: string;
    initial: string;
    hint?: string;
    validator: (v: any) => boolean | Promise<boolean>;
    errorMsg: string;
    cursor: number;
    cursorOffset: number;
    clear: any;
    done: boolean | undefined;
    error: boolean | undefined;
    red: boolean | undefined;
    outputError: string | undefined;
    name: "TextPrompt";
    _value: string;
    placeholder: boolean;
    rendered: string;
    outputText: string;
    constructor(opts: TextPromptOptions);
    get type(): "text";
    set value(v: string);
    get value(): string;
    reset(): void;
    exit(): void;
    abort(): void;
    validate(): Promise<void>;
    submit(): Promise<void>;
    next(): void;
    moveCursor(n: number): void;
    _(c: string, key: ActionKey): void;
    delete(): void;
    deleteForward(): void;
    first(): void;
    last(): void;
    left(): void;
    right(): void;
    isCursorAtStart(): boolean;
    isCursorAtEnd(): boolean;
    render(): void;
}
