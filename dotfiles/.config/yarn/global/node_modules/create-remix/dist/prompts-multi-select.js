/**
 * create-remix v2.12.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sisteransi = require('sisteransi');
var promptsPromptBase = require('./prompts-prompt-base.js');
var utils = require('./utils.js');

/**
 * Adapted from https://github.com/withastro/cli-kit
 * @license MIT License Copyright (c) 2022 Nate Moore
 */
class MultiSelectPrompt extends promptsPromptBase.Prompt {
  name = "MultiSelectPrompt";

  // set by render which is called in constructor

  constructor(opts) {
    if (!opts.choices || !Array.isArray(opts.choices) || opts.choices.length < 1) {
      throw new Error("MultiSelectPrompt must contain choices");
    }
    super(opts);
    this.label = opts.label;
    this.msg = opts.message;
    this.hint = opts.hint;
    this.value = [];
    this.choices = opts.choices.map(choice => ({
      ...choice,
      selected: false
    })) || [];
    this.initialValue = opts.initial || this.choices[0].value;
    this.cursor = this.choices.findIndex(c => c.value === this.initialValue);
    this.render();
  }
  get type() {
    return "multiselect";
  }
  exit() {
    this.abort();
  }
  abort() {
    this.done = this.aborted = true;
    this.cursor = this.choices.findIndex(c => c.value === this.initialValue);
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  submit() {
    return this.toggle();
  }
  finish() {
    // eslint-disable-next-line no-self-assign
    this.value = this.value;
    this.done = true;
    this.aborted = false;
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  moveCursor(n) {
    this.cursor = n;
    this.fire();
  }
  toggle() {
    let choice = this.choices[this.cursor];
    if (!choice) return;
    choice.selected = !choice.selected;
    this.render();
  }
  _(c, key) {
    if (c === " ") {
      return this.toggle();
    }
    if (c.toLowerCase() === "c") {
      return this.finish();
    }
    return;
  }
  reset() {
    this.moveCursor(0);
    this.fire();
    this.render();
  }
  first() {
    this.moveCursor(0);
    this.render();
  }
  last() {
    this.moveCursor(this.choices.length - 1);
    this.render();
  }
  up() {
    if (this.cursor === 0) {
      this.moveCursor(this.choices.length - 1);
    } else {
      this.moveCursor(this.cursor - 1);
    }
    this.render();
  }
  down() {
    if (this.cursor === this.choices.length - 1) {
      this.moveCursor(0);
    } else {
      this.moveCursor(this.cursor + 1);
    }
    this.render();
  }
  render() {
    if (this.closed) return;
    if (this.firstRender) {
      this.out.write(sisteransi.cursor.hide);
    } else {
      this.out.write(utils.clear(this.outputText, this.out.columns));
    }
    super.render();
    let outputText = ["\n", this.label, " ", this.msg, "\n"];
    let prefix = " ".repeat(utils.strip(this.label).length);
    if (this.done) {
      outputText.push(this.choices.map(choice => choice.selected ? `${prefix} ${utils.color.dim(`${choice.label}`)}\n` : "").join("").trimEnd());
    } else {
      outputText.push(this.choices.map((choice, i) => i === this.cursor ? `${prefix.slice(0, -2)}${utils.color.cyanBright("▶")}  ${choice.selected ? utils.color.green("■") : utils.color.whiteBright("□")} ${utils.color.underline(choice.label)} ${choice.hint ? utils.color.dim(choice.hint) : ""}` : utils.color[choice.selected ? "reset" : "dim"](`${prefix} ${choice.selected ? utils.color.green("■") : "□"} ${choice.label} `)).join("\n"));
      outputText.push(`\n\n${prefix} Press ${utils.color.inverse(" C ")} to continue`);
    }
    this.outputText = outputText.join("");
    this.out.write(sisteransi.erase.line + sisteransi.cursor.to(0) + this.outputText);
  }
}

exports.MultiSelectPrompt = MultiSelectPrompt;
