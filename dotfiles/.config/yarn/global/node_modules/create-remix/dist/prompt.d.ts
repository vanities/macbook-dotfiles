/// <reference types="node" />
export declare function prompt<T extends Readonly<PromptType<any>> | Readonly<PromptType<any>[]>, P extends T extends Readonly<any[]> ? T[number] : T = T extends Readonly<any[]> ? T[number] : T>(questions: T, opts?: PromptTypeOptions<P>): Promise<Answers<T>>;
type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
interface BasePromptType {
    name: string;
}
interface TextPromptType extends BasePromptType {
    type: "text";
}
interface ConfirmPromptType extends BasePromptType {
    type: "confirm";
}
interface SelectPromptType<Choices extends Readonly<Readonly<SelectChoiceType>[]>> extends BasePromptType {
    type: "select";
    choices: Choices;
}
interface MultiSelectPromptType<Choices extends Readonly<Readonly<SelectChoiceType>[]>> extends BasePromptType {
    type: "multiselect";
    choices: Choices;
}
interface SelectChoiceType {
    value: unknown;
    label: string;
    hint?: string;
}
type PromptType<Choices extends Readonly<SelectChoiceType[]> = Readonly<SelectChoiceType[]>> = TextPromptType | ConfirmPromptType | SelectPromptType<Choices> | MultiSelectPromptType<Choices>;
type PromptChoices<T extends PromptType<any>> = T extends SelectPromptType<infer Choices> ? Choices : T extends MultiSelectPromptType<infer Choices> ? Choices : never;
type Answer<T extends PromptType<any>, Choices extends Readonly<SelectChoiceType[]> = PromptChoices<T>> = T extends TextPromptType ? string : T extends ConfirmPromptType ? boolean : T extends SelectPromptType<Choices> ? Choices[number]["value"] : T extends MultiSelectPromptType<Choices> ? (Choices[number]["value"] | undefined)[] : never;
type Answers<T extends Readonly<PromptType<any>> | Readonly<PromptType<any>[]>> = T extends Readonly<PromptType<any>> ? Partial<{
    [key in T["name"]]: Answer<T>;
}> : T extends Readonly<PromptType<any>[]> ? UnionToIntersection<Answers<T[number]>> : never;
interface PromptTypeOptions<T extends PromptType<any>, Choices extends Readonly<SelectChoiceType[]> = PromptChoices<T>> {
    onSubmit?(question: T | Readonly<T>, answer: Answer<T, Choices>, answers: Answers<T>): any;
    onCancel?(question: T | Readonly<T>, answers: Answers<T>): any;
    stdin?: NodeJS.ReadStream;
    stdout?: NodeJS.WriteStream;
}
export {};
