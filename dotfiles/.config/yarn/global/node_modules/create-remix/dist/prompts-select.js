/**
 * create-remix v2.12.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sisteransi = require('sisteransi');
var promptsPromptBase = require('./prompts-prompt-base.js');
var utils = require('./utils.js');

/**
 * Adapted from https://github.com/withastro/cli-kit
 * @license MIT License Copyright (c) 2022 Nate Moore
 */
class SelectPrompt extends promptsPromptBase.Prompt {
  name = "SelectPrompt";

  // set by render which is called in constructor

  constructor(opts) {
    if (!opts.choices || !Array.isArray(opts.choices) || opts.choices.length < 1) {
      throw new Error("SelectPrompt must contain choices");
    }
    super(opts);
    this.label = opts.label;
    this.hint = opts.hint;
    this.msg = opts.message;
    this.value = opts.initial;
    this.choices = opts.choices;
    this.initialValue = opts.initial || this.choices[0].value;
    this.cursor = this.choices.findIndex(c => c.value === this.initialValue);
    this.search = null;
    this.render();
  }
  get type() {
    return "select";
  }
  exit() {
    this.abort();
  }
  abort() {
    this.done = this.aborted = true;
    this.cursor = this.choices.findIndex(c => c.value === this.initialValue);
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  submit() {
    this.value = this.value || undefined;
    this.cursor = this.choices.findIndex(c => c.value === this.value);
    this.done = true;
    this.aborted = false;
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  delete() {
    this.search = null;
    this.render();
  }
  _(c, key) {
    if (this._timeout) clearTimeout(this._timeout);
    if (!Number.isNaN(Number.parseInt(c))) {
      let n = Number.parseInt(c) - 1;
      this.moveCursor(n);
      this.render();
      return this.submit();
    }
    this.search = this.search || "";
    this.search += c.toLowerCase();
    let choices = !this.search ? this.choices.slice(this.cursor) : this.choices;
    let n = choices.findIndex(c => c.label.toLowerCase().includes(this.search));
    if (n > -1) {
      this.moveCursor(n);
      this.render();
    }
    this._timeout = setTimeout(() => {
      this.search = null;
    }, 500);
  }
  moveCursor(n) {
    this.cursor = n;
    this.value = this.choices[n].value;
    this.fire();
  }
  reset() {
    this.moveCursor(0);
    this.fire();
    this.render();
  }
  first() {
    this.moveCursor(0);
    this.render();
  }
  last() {
    this.moveCursor(this.choices.length - 1);
    this.render();
  }
  up() {
    if (this.cursor === 0) {
      this.moveCursor(this.choices.length - 1);
    } else {
      this.moveCursor(this.cursor - 1);
    }
    this.render();
  }
  down() {
    if (this.cursor === this.choices.length - 1) {
      this.moveCursor(0);
    } else {
      this.moveCursor(this.cursor + 1);
    }
    this.render();
  }
  highlight(label) {
    if (!this.search) return label;
    let n = label.toLowerCase().indexOf(this.search.toLowerCase());
    if (n === -1) return label;
    return [label.slice(0, n), utils.color.underline(label.slice(n, n + this.search.length)), label.slice(n + this.search.length)].join("");
  }
  render() {
    if (this.closed) return;
    if (this.firstRender) this.out.write(sisteransi.cursor.hide);else this.out.write(utils.clear(this.outputText, this.out.columns));
    super.render();
    let outputText = ["\n", this.label, " ", this.msg, this.done ? "" : this.hint ? (this.out.columns < 80 ? "\n" + " ".repeat(8) : "") + utils.color.dim(` (${this.hint})`) : "", "\n"];
    let prefix = " ".repeat(utils.strip(this.label).length);
    if (this.done) {
      var _this$choices$this$cu;
      outputText.push(`${prefix} `, utils.color.dim(`${(_this$choices$this$cu = this.choices[this.cursor]) === null || _this$choices$this$cu === void 0 ? void 0 : _this$choices$this$cu.label}`));
    } else {
      outputText.push(this.choices.map((choice, i) => i === this.cursor ? `${prefix} ${utils.color.green(utils.shouldUseAscii() ? ">" : "●")} ${this.highlight(choice.label)} ${choice.hint ? utils.color.dim(choice.hint) : ""}` : utils.color.dim(`${prefix} ${utils.shouldUseAscii() ? "—" : "○"} ${choice.label} `)).join("\n"));
    }
    this.outputText = outputText.join("");
    this.out.write(sisteransi.erase.line + sisteransi.cursor.to(0) + this.outputText);
  }
}

exports.SelectPrompt = SelectPrompt;
