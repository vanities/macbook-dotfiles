/**
 * create-remix v2.12.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sisteransi = require('sisteransi');
var promptsPromptBase = require('./prompts-prompt-base.js');
var utils = require('./utils.js');

/**
 * Adapted from https://github.com/withastro/cli-kit
 * @license MIT License Copyright (c) 2022 Nate Moore
 */
class ConfirmPrompt extends promptsPromptBase.Prompt {
  name = "ConfirmPrompt";

  // set by render which is called in constructor

  constructor(opts) {
    super(opts);
    this.label = opts.label;
    this.hint = opts.hint;
    this.msg = opts.message;
    this.value = opts.initial;
    this.initialValue = !!opts.initial;
    this.choices = [{
      value: true,
      label: "Yes"
    }, {
      value: false,
      label: "No"
    }];
    this.cursor = this.choices.findIndex(c => c.value === this.initialValue);
    this.render();
  }
  get type() {
    return "confirm";
  }
  exit() {
    this.abort();
  }
  abort() {
    this.done = this.aborted = true;
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  submit() {
    this.value = this.value || false;
    this.cursor = this.choices.findIndex(c => c.value === this.value);
    this.done = true;
    this.aborted = false;
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  moveCursor(n) {
    this.cursor = n;
    this.value = this.choices[n].value;
    this.fire();
  }
  reset() {
    this.moveCursor(0);
    this.fire();
    this.render();
  }
  first() {
    this.moveCursor(0);
    this.render();
  }
  last() {
    this.moveCursor(this.choices.length - 1);
    this.render();
  }
  left() {
    if (this.cursor === 0) {
      this.moveCursor(this.choices.length - 1);
    } else {
      this.moveCursor(this.cursor - 1);
    }
    this.render();
  }
  right() {
    if (this.cursor === this.choices.length - 1) {
      this.moveCursor(0);
    } else {
      this.moveCursor(this.cursor + 1);
    }
    this.render();
  }
  _(c, key) {
    if (!Number.isNaN(Number.parseInt(c))) {
      let n = Number.parseInt(c) - 1;
      this.moveCursor(n);
      this.render();
      return this.submit();
    }
    if (c.toLowerCase() === "y") {
      this.value = true;
      return this.submit();
    }
    if (c.toLowerCase() === "n") {
      this.value = false;
      return this.submit();
    }
    return;
  }
  render() {
    if (this.closed) {
      return;
    }
    if (this.firstRender) {
      this.out.write(sisteransi.cursor.hide);
    } else {
      this.out.write(utils.clear(this.outputText, this.out.columns));
    }
    super.render();
    let outputText = ["\n", this.label, " ", this.msg, this.done ? "" : this.hint ? utils.color.dim(` (${this.hint})`) : "", "\n"];
    outputText.push(" ".repeat(utils.strip(this.label).length));
    if (this.done) {
      outputText.push(" ", utils.color.dim(`${this.choices[this.cursor].label}`));
    } else {
      outputText.push(" ", this.choices.map((choice, i) => i === this.cursor ? `${utils.color.green("●")} ${choice.label} ` : utils.color.dim(`○ ${choice.label} `)).join(utils.color.dim(" ")));
    }
    this.outputText = outputText.join("");
    this.out.write(sisteransi.erase.line + sisteransi.cursor.to(0) + this.outputText);
  }
}

exports.ConfirmPrompt = ConfirmPrompt;
