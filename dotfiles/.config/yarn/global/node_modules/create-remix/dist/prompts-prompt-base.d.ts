/// <reference types="node" />
/// <reference types="node" />
/**
 * Adapted from https://github.com/withastro/cli-kit
 * @license MIT License Copyright (c) 2022 Nate Moore
 */
import process from "node:process";
import EventEmitter from "node:events";
import { type ActionKey } from "./utils";
export declare class Prompt extends EventEmitter {
    firstRender: boolean;
    in: any;
    out: any;
    onRender: any;
    close: () => void;
    aborted: any;
    exited: any;
    closed: boolean | undefined;
    name: string;
    constructor(opts?: PromptOptions);
    get type(): string;
    bell(): void;
    fire(): void;
    render(): void;
    _(c: string, key: ActionKey): void;
}
export interface PromptOptions {
    stdin?: typeof process.stdin;
    stdout?: typeof process.stdout;
    onRender?(render: (...text: unknown[]) => string): void;
    onSubmit?(v: any): void | undefined | boolean | Promise<void | undefined | boolean>;
    onCancel?(v: any): void | undefined | boolean | Promise<void | undefined | boolean>;
    onAbort?(v: any): void | undefined | boolean | Promise<void | undefined | boolean>;
    onExit?(v: any): void | undefined | boolean | Promise<void | undefined | boolean>;
    onState?(v: any): void | undefined | boolean | Promise<void | undefined | boolean>;
}
