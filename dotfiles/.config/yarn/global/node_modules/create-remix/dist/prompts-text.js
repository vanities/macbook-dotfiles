/**
 * create-remix v2.12.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sisteransi = require('sisteransi');
var promptsPromptBase = require('./prompts-prompt-base.js');
var utils = require('./utils.js');

/**
 * Adapted from https://github.com/withastro/cli-kit
 * @license MIT License Copyright (c) 2022 Nate Moore
 */
class TextPrompt extends promptsPromptBase.Prompt {
  name = "TextPrompt";

  // set by value setter, value is set in constructor

  // set by render which is called in constructor

  constructor(opts) {
    super(opts);
    this.transform = {
      render: v => v,
      scale: 1
    };
    this.label = opts.label;
    this.scale = this.transform.scale;
    this.msg = opts.message;
    this.hint = opts.hint;
    this.initial = opts.initial || "";
    this.validator = opts.validate || (() => true);
    this.value = "";
    this.errorMsg = opts.error || "Please enter a valid value";
    this.cursor = Number(!!this.initial);
    this.cursorOffset = 0;
    this.clear = utils.clear(``, this.out.columns);
    this.render();
  }
  get type() {
    return "text";
  }
  set value(v) {
    if (!v && this.initial) {
      this.placeholder = true;
      this.rendered = utils.color.dim(this.initial);
    } else {
      this.placeholder = false;
      this.rendered = this.transform.render(v);
    }
    this._value = v;
    this.fire();
  }
  get value() {
    return this._value;
  }
  reset() {
    this.value = "";
    this.cursor = Number(!!this.initial);
    this.cursorOffset = 0;
    this.fire();
    this.render();
  }
  exit() {
    this.abort();
  }
  abort() {
    this.value = this.value || this.initial;
    this.done = this.aborted = true;
    this.error = false;
    this.red = false;
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  async validate() {
    let valid = await this.validator(this.value);
    if (typeof valid === `string`) {
      this.errorMsg = valid;
      valid = false;
    }
    this.error = !valid;
  }
  async submit() {
    this.value = this.value || this.initial;
    this.cursorOffset = 0;
    this.cursor = this.rendered.length;
    await this.validate();
    if (this.error) {
      this.red = true;
      this.fire();
      this.render();
      return;
    }
    this.done = true;
    this.aborted = false;
    this.fire();
    this.render();
    this.out.write("\n");
    this.close();
  }
  next() {
    if (!this.placeholder) return this.bell();
    this.value = this.initial;
    this.cursor = this.rendered.length;
    this.fire();
    this.render();
  }
  moveCursor(n) {
    if (this.placeholder) return;
    this.cursor = this.cursor + n;
    this.cursorOffset += n;
  }
  _(c, key) {
    let s1 = this.value.slice(0, this.cursor);
    let s2 = this.value.slice(this.cursor);
    this.value = `${s1}${c}${s2}`;
    this.red = false;
    this.cursor = this.placeholder ? 0 : s1.length + 1;
    this.render();
  }
  delete() {
    if (this.isCursorAtStart()) return this.bell();
    let s1 = this.value.slice(0, this.cursor - 1);
    let s2 = this.value.slice(this.cursor);
    this.value = `${s1}${s2}`;
    this.red = false;
    this.outputError = "";
    this.error = false;
    if (this.isCursorAtStart()) {
      this.cursorOffset = 0;
    } else {
      this.cursorOffset++;
      this.moveCursor(-1);
    }
    this.render();
  }
  deleteForward() {
    if (this.cursor * this.scale >= this.rendered.length || this.placeholder) return this.bell();
    let s1 = this.value.slice(0, this.cursor);
    let s2 = this.value.slice(this.cursor + 1);
    this.value = `${s1}${s2}`;
    this.red = false;
    this.outputError = "";
    this.error = false;
    if (this.isCursorAtEnd()) {
      this.cursorOffset = 0;
    } else {
      this.cursorOffset++;
    }
    this.render();
  }
  first() {
    this.cursor = 0;
    this.render();
  }
  last() {
    this.cursor = this.value.length;
    this.render();
  }
  left() {
    if (this.cursor <= 0 || this.placeholder) return this.bell();
    this.moveCursor(-1);
    this.render();
  }
  right() {
    if (this.cursor * this.scale >= this.rendered.length || this.placeholder) return this.bell();
    this.moveCursor(1);
    this.render();
  }
  isCursorAtStart() {
    return this.cursor === 0 || this.placeholder && this.cursor === 1;
  }
  isCursorAtEnd() {
    return this.cursor === this.rendered.length || this.placeholder && this.cursor === this.rendered.length + 1;
  }
  render() {
    if (this.closed) return;
    if (!this.firstRender) {
      if (this.outputError) this.out.write(sisteransi.cursor.down(utils.lines(this.outputError, this.out.columns) - 1) + utils.clear(this.outputError, this.out.columns));
      this.out.write(utils.clear(this.outputText, this.out.columns));
    }
    super.render();
    this.outputError = "";
    let prefix = " ".repeat(utils.strip(this.label).length);
    this.outputText = ["\n", this.label, " ", this.msg, this.done ? "" : this.hint ? (this.out.columns < 80 ? "\n" + " ".repeat(8) : "") + utils.color.dim(` (${this.hint})`) : "", "\n" + prefix, " ", this.done ? utils.color.dim(this.rendered) : this.rendered].join("");
    if (this.error) {
      this.outputError += `  ${utils.color.redBright((utils.shouldUseAscii() ? "> " : "â–¶ ") + this.errorMsg)}`;
    }
    this.out.write(sisteransi.erase.line + sisteransi.cursor.to(0) + this.outputText + sisteransi.cursor.save + this.outputError + sisteransi.cursor.restore + sisteransi.cursor.move(this.placeholder ? (this.rendered.length - 9) * -1 : this.cursorOffset, 0));
  }
}

exports.TextPrompt = TextPrompt;
