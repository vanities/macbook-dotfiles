/// <reference types="node" />
import { Prompt, type PromptOptions } from "./prompts-prompt-base";
import { type SelectChoice } from "./prompts-select";
import { type ActionKey } from "./utils";
export interface MultiSelectPromptOptions<Choices extends Readonly<Readonly<SelectChoice>[]>> extends PromptOptions {
    hint?: string;
    message: string;
    label: string;
    initial?: Choices[number]["value"];
    validate?: (v: any) => boolean;
    error?: string;
    choices: Choices;
}
export declare class MultiSelectPrompt<Choices extends Readonly<Readonly<SelectChoice>[]>> extends Prompt {
    choices: Readonly<Array<Choices[number] & {
        selected: boolean;
    }>>;
    label: string;
    msg: string;
    hint?: string;
    value: Array<Choices[number]["value"]>;
    initialValue: Choices[number]["value"];
    done: boolean | undefined;
    cursor: number;
    name: "MultiSelectPrompt";
    outputText: string;
    constructor(opts: MultiSelectPromptOptions<Choices>);
    get type(): "multiselect";
    exit(): void;
    abort(): void;
    submit(): void;
    finish(): void;
    moveCursor(n: number): void;
    toggle(): void;
    _(c: string, key: ActionKey): void;
    reset(): void;
    first(): void;
    last(): void;
    up(): void;
    down(): void;
    render(): void;
}
