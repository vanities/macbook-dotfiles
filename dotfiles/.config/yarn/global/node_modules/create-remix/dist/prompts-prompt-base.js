/**
 * create-remix v2.12.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var process = require('node:process');
var EventEmitter = require('node:events');
var readline = require('node:readline');
var sisteransi = require('sisteransi');
var utils = require('./utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var process__default = /*#__PURE__*/_interopDefaultLegacy(process);
var EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter);
var readline__default = /*#__PURE__*/_interopDefaultLegacy(readline);

/**
 * Adapted from https://github.com/withastro/cli-kit
 * @license MIT License Copyright (c) 2022 Nate Moore
 */
class Prompt extends EventEmitter__default["default"] {
  name = "Prompt";
  constructor(opts = {}) {
    super();
    this.firstRender = true;
    this.in = opts.stdin || process__default["default"].stdin;
    this.out = opts.stdout || process__default["default"].stdout;
    this.onRender = (opts.onRender || (() => void 0)).bind(this);
    let rl = readline__default["default"].createInterface({
      input: this.in,
      escapeCodeTimeout: 50
    });
    readline__default["default"].emitKeypressEvents(this.in, rl);
    if (this.in.isTTY) this.in.setRawMode(true);
    let isSelect = ["SelectPrompt", "MultiSelectPrompt"].indexOf(this.constructor.name) > -1;
    let keypress = (str, key) => {
      if (this.in.isTTY) this.in.setRawMode(true);
      let a = utils.action(key, isSelect);
      if (a === false) {
        try {
          this._(str, key);
        } catch (_) {}
        // @ts-expect-error
      } else if (typeof this[a] === "function") {
        // @ts-expect-error
        this[a](key);
      }
    };
    this.close = () => {
      this.out.write(sisteransi.cursor.show);
      this.in.removeListener("keypress", keypress);
      if (this.in.isTTY) this.in.setRawMode(false);
      rl.close();
      this.emit(this.aborted ? "abort" : this.exited ? "exit" : "submit",
      // @ts-expect-error
      this.value);
      this.closed = true;
    };
    this.in.on("keypress", keypress);
  }
  get type() {
    throw new Error("Method type not implemented.");
  }
  bell() {
    this.out.write(sisteransi.beep);
  }
  fire() {
    this.emit("state", {
      // @ts-expect-error
      value: this.value,
      aborted: !!this.aborted,
      exited: !!this.exited
    });
  }
  render() {
    this.onRender(utils.color);
    if (this.firstRender) this.firstRender = false;
  }
  _(c, key) {
    throw new Error("Method _ not implemented.");
  }
}

exports.Prompt = Prompt;
